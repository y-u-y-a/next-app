/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/user/{userId}": {
    /**
     * User取得
     * @description 登録されているユーザーを一覧で取得します。
     */
    get: {
      parameters: {
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      responses: {
        200: components["responses"]["GetUserResponse"];
        404: components["responses"]["NotFoundErrorResponse"];
        500: components["responses"]["InternalServerErrorResponse"];
      };
    };
  };
  "/user": {
    /**
     * User登録
     * @description ユーザーを登録します。
     */
    post: {
      requestBody: components["requestBodies"]["CreateUserRequestBody"];
      responses: {
        200: components["responses"]["CreateUserResponse"];
        404: components["responses"]["NotFoundErrorResponse"];
        500: components["responses"]["InternalServerErrorResponse"];
      };
    };
  };
  "/companies": {
    /**
     * Company一覧取得
     * @description 登録されているCompanyをページネーション取得します。
     */
    get: {
      parameters: {
        query?: {
          currentPage?: components["parameters"]["CurrentPage"];
          paginate?: components["parameters"]["Paginate"];
        };
      };
      responses: {
        200: components["responses"]["GetCompaniesResponse"];
        404: components["responses"]["NotFoundErrorResponse"];
        500: components["responses"]["InternalServerErrorResponse"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Paging: {
      /** 総ページ数 */
      totalPages: number;
      /** 取得したページ */
      currentPage: number;
      /** ページ毎の表示件数 */
      paginate: number;
      /** アイテムの総数 */
      total: number;
    };
    User: {
      /** ID */
      id: string;
      /** ユーザー名 */
      name: string;
      /** メールアドレス */
      email: string;
    };
    Company: {
      /** ID */
      id: string;
      /** 企業名 */
      name: string;
      /** メールアドレス */
      email: string;
    };
    Companies: components["schemas"]["Company"][];
  };
  responses: {
    GetUserResponse: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    CreateUserResponse: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    GetCompaniesResponse: {
      content: {
        "application/json": {
          companies: components["schemas"]["Companies"];
          paging: components["schemas"]["Paging"];
        };
      };
    };
    NotFoundErrorResponse: {
      content: {
        "application/json": {
          /**
           * @description ステータスコード
           * @example 404
           */
          code: number;
          /**
           * @description エラーメッセージ
           * @example Not found resource.
           */
          message?: string;
        };
      };
    };
    InternalServerErrorResponse: {
      content: {
        "application/json": {
          /**
           * @description ステータスコード
           * @example 500
           */
          code: number;
          /**
           * @description エラーメッセージ
           * @example Server error.
           */
          message?: string;
        };
      };
    };
  };
  parameters: {
    /** @description 現在のページ番号（1〜） */
    CurrentPage?: number;
    /** @description ページ毎の表示件数 */
    Paginate?: number;
    /** @description 取得したいユーザーIDを指定します。 */
    UserId: string;
  };
  requestBodies: {
    CreateUserRequestBody: {
      content: {
        "application/json": {
          /** ユーザー名 */
          name: string;
          /** メールアドレス */
          email: string;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
